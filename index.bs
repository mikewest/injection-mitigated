<pre class='metadata'>
Title: The `[InjectionMitigated]` WebIDL Attribute
Shortname: injection-mitigated
Status: DREAM
Repository: mikewest/injection-mitigated
URL: https://mikewest.github.io/injection-mitigated/
Editor: Mike West, Google LLC.
Abstract:
  This document defines the `[InjectionMitigated]` WebIDL attribute
  as a way of limiting the exposure of capabilities to those
  contexts which are sufficiently protected against injection attacks
  like XSS.
Complain About: accidental-2119 yes, missing-example-ids yes
Markup Shorthands: markdown yes, css no
</pre>
<pre class=link-defaults>
spec:csp3; type:dfn; for:/; text:csp list
spec:infra; type:dfn; for:list; text:for each
spec:webidl; type:dfn; text:namespace
spec:ecmascript; type:dfn; for:ECMAScript; text:realm
</pre>
<pre class=anchors>
urlPrefix: https://w3c.github.io/webappsec-csp/; spec:CSP3
    type: abstract-op
        text: Get fetch directive fallback list; url: #directive-fallback-list
</pre>
<pre class=biblio>
{
  "long-live-csp": {
      "href": "https://dl.acm.org/doi/10.1145/2976749.2978363",
      "title": "CSP Is Dead, Long Live CSP! On the Insecurity of Whitelists and the Future of Content Security Policy",
      "authors": [ "Lukas Weichselbaum", "Michele Spagnuolo", "Sebastian Lekies", "Artur Janc" ],
      "date": "24 October 2016"
  },
  "strict-csp": {
      "href": "https://web.dev/strict-csp/",
      "title": "Mitigate cross-site scripting (XSS) with a strict Content Security Policy (CSP)",
      "authors": [ "Lukas Weichselbaum" ],
      "date": "15 March 2021"
  },
  "securer-contexts": {
    "authors": [ "Mike West" ],
    "href": "https://github.com/mikewest/securer-contexts",
    "title": "Securer Contexts"
  }
}
</pre>

Introduction {#intro}
============

This is a monkey-patch spec meant to outline the changes necessary to define an
`[InjectionMitigated]` WebIDL attribute that limits the exposure of interfaces,
attributes, methods, etc. to those context which sufficiently mitigate various
forms of injection attack.

[[#impl-csp]] and [[#impl-apis]] provide useful context for the kinds of
mitigation this document proposes, and the ways in which those mitigations
ought to restrict the set of capabilities we offer to web developers.

This document sketches the following modifications to three specifications:

*   [[CSP]] will define the characteristics of a policy that's robust enough to
    meaningfully defend against attack. It builds on what we've learned from
    explorations like [[strict-csp]] and [[securer-contexts]], pushing
    developers towards well-understood and valuable defenses.

*   [[HTML]] will define the ways in which those characteristics are evaluated
    within a given context, similar conceptually to [=secure context=] and
    [=environment settings object/cross-origin isolated capability=].

*   [[WEBIDL]] will define the `[InjectionMitigated]` attribute, and the way it
    relies on the changes above to control the exposure of a given WebIDL
    construct.

Let's get to it.

Monkey Patches {#monkey}
==============

Content Security Policy {#monkey-csp}
-----------------------

In [[CSP]], we'll define an algorithm for evaluating the strength of the
amalgamation of policies contained within a [=CSP list=]. We'll define a
few supporting algorithms as well, but [[#meaningful-injection-mitigation]]
is the core entry point CSP will expose to HTML.

Note: [[#impl-csp]] explains and justifies the threat model and constraints we
believe are necessary to address it.

### Does a policy meaningfully mitigate injection attacks? ### {#meaningful-injection-mitigation}

<div algorithm="meaningfully mitigates injection">
With the characteristics described in [[#impl-csp]] in mind, a [=CSP list=]
|policies| is said to
<dfn for="CSP list" export local-lt="mitigate">meaningfully
mitigate injection attacks</dfn> if the following algorithm returns
"`Meaningful`":

<ol class="algorithm">
    1.  Let |meets object requirements|, |meets base requirements|,
        |meets script requirements|, and |meets trusted type requirements| be
        [=booleans=] whose value is `false`.

    1.  [=For each=] |policy| in |policies|:

        1.  If |policy|'s [=policy/disposition=] is not "`enforce`" or
            |policy|'s [=policy/source=] is not "`header`",
            [=iteration/continue=].

        1.  If |policy| [=policy/sufficiently mitigates plugins=], set
            |meets object requirements| to `true`. 

        1.  If |policy| [=policy/sufficiently mitigates relative URL manipulation=], set
            |meets base requirements| to `true`. 

        1.  If |policy| [=policy/sufficiently mitigates script execution=], set
            |meets script requirements| to `true`.

        1.  If |policy| [=policy/sufficiently mitigates DOM sinks=], set
            |meets trusted type requirements| to `true`. 

    1.  Return "`Meaningful`" if |meets object requirements|,
        |meets base requirements|, |meets script requirements|, and
        |meets trusted type requirements| are all `true`.

    1. Return "`Not meaningful enough`".
</ol>
</div>

### Obtain the active directive for a type ### {#csp-active-directive}

<div algorithm="get active directive">
CSP defines a fallback chain for some directives which we need to account for
when evaluating a given policy. To <dfn abstract-op lt="obtain-directive">obtain
the active directive</dfn> given a [=policy=] |policy| and a |directive name|:

<ol class="algorithm">
    1.  Let |fallback chain| be the result of executing <a abstract-op>Get fetch
        directive fallback list</a> on |directive name|.

    1.  [=For each=] |name| in |fallback chain|:

        1.  If |policy|'s [=policy/directive set=] [=set/contains=] a [=directive=]
            |directive| whose [=directive/name=] is |name|, return |directive|.

    1.  Return null.
</ol>
</div>

### Does a policy sufficiently mitigate plugins? ### {#csp-plugin-mitigation}

<div algorithm="object requirements">
A [=policy=] |policy| <dfn for="policy">sufficiently mitigates plugins</dfn> if
the following algorithm returns "`Sufficient`":

<ol class="algorithm">
    1.  <a abstract-op lt="obtain-directive">Obtain</a> |active directive| from
        |policy|, given "`object-src`".

    1.  Return "`Sufficient`" if all of the following are true:

        *   |active directive| is not null
        *   |active directive|'s [=directive/value=]'s [=set/size=] is 1
        *   |active directive|'s [=directive/value=][0] is an
            [=ASCII case-insensitive=] match for the string "`'none'`".

    1.  Return "`Not sufficient`".
</ol>

Note: This algorithm does not distinguish between policies with a
[=policy/disposition=] of "`enforce`" or "`report`".
</div>

### Does a policy sufficiently mitigate relative URL manipulation? ### {#csp-relative-url}

<div algorithm="base requirements">
A [=policy=] |policy| <dfn for="policy">sufficiently mitigates relative URL manipulation</dfn> if
the following algorithm returns "`Sufficient`":

<ol class="algorithm">
    1.  [=For each=] |directive| in |policy|'s [=policy/directive set=]:

        1.  Return "`Sufficient`" if all of the following are true:

            *   |directive|'s [=directive/name=] is "`base-uri`".
            *   |directive|'s [=directive/value=]'s [=set/size=] is 1
            *   |directive|'s [=directive/value=][0] is an
                [=ASCII case-insensitive=] match for either the string
                "`'none'`" or the string "`'self'`".

    1.  Return "`Not sufficient`".
</ol>

Note: This algorithm does not distinguish between policies with a
[=policy/disposition=] of "`enforce`" or "`report`".
</div>

### Does a policy sufficiently mitigate script execution? ### {#csp-script-mitigation}

<div algorithm="script requirements">
A [=policy=] |policy| <dfn for="policy">sufficiently mitigates script execution</dfn>
if the following algorithm returns "`Sufficient`":

<ol class="algorithm">
    1.  <a abstract-op lt="obtain-directive">Obtain</a> |element directive| from
        |policy|, given "`script-src-elem`".

    1.  If |element directive| is null, return "`Not sufficient`".

    1.  Let |strict-dynamic| and |insufficient mitigation unless strict-dynamic is specified|
        be `false`.

    1.  Let |hash-or-nonce| and |insufficient mitigation unless hash-or-nonce or strict-dynamic is specified|
        be `false`.

    1.  [=For each=] |source expression| in |element directive|'s [=directive/value=]:

        1.  Set |strict-dynamic| to `true` if |source expression| is an
            [=ASCII case-insensitive=] match for the string "`'strict-dynamic'`".

        1.  Set |insufficient mitigation unless strict-dynamic is specified| to `true`
            if any of the following conditions are met:

            *   |source expression| is an [=ASCII case-insensitive=] match for the string "`'self'`".
            *   |source expression| is an [=ASCII case-insensitive=] match for the string "`'unsafe-eval'`".
            *   |source expression| matches the <a grammar>host-source</a> grammar.
            *   |source expression| matches the <a grammar>scheme-source</a> grammar.

        1.  Set |hash-or-nonce| to `true` if |source expression| matches the <a grammar>nonce-source</a>
            or <a grammar>hash-source</a>.

        1.  Set |insufficient mitigation unless hash-or-nonce or strict-dynamic is specified| to `true` if
            |source expression| is an [=ASCII case-insensitive=] match for the string "`'unsafe-inline'`".
    
    1.  Return "`Sufficient`" if all of the following are true:

        *   |insufficient mitigation unless strict-dynamic is specified| is `false`
            **or** |strict-dynamic| is `true`.
        *   |insufficient mitigation unless hash-or-nonce or strict-dynamic is specified| is `false`
            **or** |strict-dynamic| is `true` **or** |hash-or-nonce| is `true`.

    1.  Return "`Not sufficient`".
</ol>

Note: This algorithm does not distinguish between policies with a
[=policy/disposition=] of "`enforce`" or "`report`".
</div>

### Does a policy sufficiently mitigate DOM sinks? ### {#csp-sink-mitigation}

<div algorithm="trusted type requirements">
A [=policy=] |policy| <dfn for="policy">sufficiently mitigates DOM sinks</dfn>
if the following algorithm returns "`Sufficient`":

<ol class="algorithm">
    1.  [=For each=] |directive| in |policy|'s [=policy/directive set=]:

        1.  Return "`Sufficient`" if all of the following are true:

            *   |directive|'s [=directive/name=] is
                "`require-trusted-types-for`". [[!TRUSTED-TYPES]]
            *   |directive|'s [=directive/value=] [=set/contains=][0] an
                [=ASCII case-insensitive=] match for the string "`'script'`".

    1.  Return "`Not sufficient`".
</ol>

Note: This algorithm does not distinguish between policies with a
[=policy/disposition=] of "`enforce`" or "`report`".
</div>

HTML {#monkey-html}
----

In HTML, we'll use the algorithms described in [[#monkey-csp]] to define characteristics
of the [=environment settings object=] that will be examined from [[WEBIDL]] when
determining whether or not a given IDL construct is exposed on the associated
[=environment settings object/global object=].

<div algorithm="environment settings object mitigates injection">
An [=environment settings object=] is said to
<dfn for="environment settings object" export>meaningfully mitigate injection attacks</dfn> if its
[=environment settings object/policy container=]'s [=policy container/CSP list=]
<a for="CSP list" lt="mitigate">meaningfully mitigates injection attacks</a>.

Note: Because the definition of meaningful injection mitigation for a CSP list depends only upon
the header-delivered policies, this property will not mutate during an environment's lifetime.
</div>

WebIDL {#monkey-webidl}
------

In WebIDL, we'll define the `[InjectionMitigated]` attribute, and wire it up to the hook created
in HTML above:

<h4 id="InjectionMitigated" extended-attribute lt="InjectionMitigated">[InjectionMitigated]</h4>

If the [{{InjectionMitigated}}] [=extended attribute=] appears on an
[=interface=],
[=partial interface=],
[=interface mixin=],
[=partial interface mixin=],
[=callback interface=],
[=namespace=],
[=partial namespace=],
[=interface member=],
[=interface mixin member=], or
[=namespace member=],
it indicates that the construct is [=exposed=] only within an environment which can
[=environment settings object/meaningfully mitigate injection attacks=]. The
[{{InjectionMitigated}}] extended attribute must not be used on any other construct.

The [{{InjectionMitigated}}] extended attribute must [=takes no arguments|take no arguments=].

ISSUE: It might be reasonable to parameterize this attribute, either because we think that
a subset of the protections defined in this document are easier to deploy (e.g. strict CSP
but not Trusted Types), or because we have different characteristics in mind for different
contexts (e.g. [Isolated Web Apps](https://github.com/WICG/isolated-web-apps/)). See the
issues called out in [[#impl-csp]] below for more thoughts.

If [{{InjectionMitigated}}] appears on an [=overloaded=] [=operation=],
then it must appear on all overloads.

The [{{InjectionMitigated}}] [=extended attribute=] must not be specified both on

* an [=interface member=] and its [=interface=] or [=partial interface=];
* an [=interface mixin member=] and its [=interface mixin=] or [=partial interface mixin=];
* a [=namespace member=] and its [=namespace=] or [=partial namespace=].

Note: This is because adding the [{{InjectionMitigated}}] [=extended attribute=] on a [=member=]
when its containing definition is also annotated with the [{{InjectionMitigated}}]
[=extended attribute=] does not further restrict the exposure of the [=member=].

An [=interface=] without the [{{InjectionMitigated}}] [=extended attribute=]
must not [=interface/inherit=] from another interface
that does specify [{{InjectionMitigated}}].

<div class="example" id="its-an-example">
    The following [=IDL fragment=] defines an interface with one [=operation=] that is executable
    from all contexts, and two which are executable only from contexts with meaningful injection
    attack mitigation:

    <pre highlight="webidl">
        [Exposed=Window]
        interface ExampleFeature {
          // This call will succeed in all contexts.
          Promise &lt;Result&gt; doBoringThing();

          // This operation will not be exposed to context that lacks sufficient mitigation against
          // injection attack. In such a context, there will be no "doPowerfulThing" property on
          // ExampleFeature.prototype.
          [InjectionMitigated] Promise&lt;Result&gt; doPowerfulThing();

          // The same applies here: the attribute will not be exposed to an unprotected context,
          // and in such a context there will be no "secretBoolean" property on
          // ExampleFeature.prototype.
          [InjectionMitigated] readonly attribute boolean secretBoolean;
        };
    </pre>
</div>

### Patches to the "exposed" algorithm ### {#monkey-webidl-exposed}

WebIDL's [=exposed=] algorithm is adjusted as follows, adding a single step after
similarly handling [{{CrossOriginIsolated}}] (step 4 below).

<div algorithm>
    An [=interface=], [=callback interface=], [=namespace=], or [=member=] |construct| is
    <dfn id="dfn-exposed" export>exposed</dfn> in a given [=realm=] |realm| if the following steps
    return true:

    <ol>
        <li>If |construct|'s [=exposure set=] is not <code>*</code>, and |realm|.\[[GlobalObject]] does not implement an [=interface=] that is in |construct|'s [=exposure set=], then return false.</li>
        <li>If |realm|'s [=realm/settings object=] is not a [=secure context=], and |construct| is [=conditionally exposed=] on [{{SecureContext}}], then return false.</li>
        <li>If |realm|'s [=realm/settings object=]'s [=environment settings object/cross-origin isolated capability=] is false, and |construct| is [=conditionally exposed=] on [{{CrossOriginIsolated}}], then return false.</li>
        <li><ins>
            If |realm|'s [=realm/settings object=]'s does not
            [=environment settings object/meaningfully mitigate injection attacks=], and |construct|
            is [=conditionally exposed=] on [{{InjectionMitigated}}], then return `false`.
        </ins></li>
        <li>Return true.
    </ol>
</div>

Implementation Considerations {#impl}
=============================

What defenses does `[InjectionMitigated]` require? {#impl-csp}
--------------------------------------------------

If we start from a threat model in which an attacker can cause a server to
"reflect" unexpected content directly into the body of any given response,
or manipulate the inputs to client-side code (DOM APIs and otherwise), we
can point to five characteristics of a Content Security Policy that gives
developers a reasonable chance of avoiding unexpected script execution:

1.  At least one of the policies in the list enforces a restriction on plugin
    content via `object-src 'none'`.

    ISSUE: Is this necessary anymore? Chrome certainly has weird things like
    [Native Client](https://www.chromium.org/nativeclient/), at least in Chrome
    App and Extensions contexts. Those seem separable from the web, though. We
    should look into browser behavior here, as it might be possible to simplify
    the recommendation.

2.  At least one of the policies in the list enforces a restriction on modifying
    the [=document base URL=] via `base-uri 'none'` or `base-uri 'self'`. This
    prevents attackers from injecting a <{base}> element that could maliciously
    push scripts specified with relative URLs (e.g. `<script src="/app.js">`)
    out to an attacker-controlled server.

3.  At least one of the policies in the list enforces a restriction on script
    execution that relies on nonces and/or hashes rather than URLs. Research
    like [[long-live-csp]] has shown URL-based allowlisting to be quite
    ineffective at creating meaningful protection, while content-based
    allowlisting (hashes) or element tagging (nonces) are far more robust.

    ISSUE: [Isolated Web Apps](https://github.com/WICG/isolated-web-apps/)
    are an example of a context that can get away with a looser policy for
    this aspect of the story (e.g. `script-src 'self'`) because of other
    layers of injection mitigation (in this case the requirement that script
    be staticly embedded in the app's package). Perhaps we should expand the
    restriction to include that case as well?

4.  At least one of the policies in the list enforces [[Trusted-Types]] via
    `require-trusted-types-for 'script'`.

    ISSUE: It might be helpful for deployment to make this last requirement
    optional while user agents are still in the process of implementing bits
    and pieces of trusted types. We could parameterize the IDL attribute, for
    example (e.g. `[InjectionMitigated=Basic]` vs
    `[InjectionMitigated=RequireTrustedTypes]`), though I've no idea how we'd
    spell out a meaningful bar that would allow folks creating APIs to decide
    which they'd prefer.

5.  Each of the above characteristics is true in a way provably prior to any
    potential code execution. This boils down to ensuring that the policies
    creating the relevant constraints are delivered via headers that are applied
    at the time the [=environment settings object=] is created, and are not
    added later via <{meta}> tags.

These characteristics aren't pulled from thin air, but are the result of a good
deal of experimentation and research over the years since CSP was introduced.
[[long-live-csp]] is a seminal paper on the topic.

Policies matching these requirements are deployed at scale today, and are
emperically proven to be fairly robust defenses.

ISSUE(mikewest/securer-contexts#1): Anne noted in a previous iteration of this
proposal that it differs meaningfully from [{{SecureContext}}] and
[{{CrossOriginIsolated}}] insofar as it doesn't require anything of a
context's ancestors. That is, we're evaluting the injection mitigation of a
specific document or worker or etc, and would expose an IDL construct there
regardless of whether that context's parent also met the requirements. Should
we apply the same considerations of
[ancestral risk](https://w3c.github.io/webappsec-secure-contexts/#ancestors)
that we took into account when defining Secure Contexts? Perhaps!


What APIs should be marked as `[InjectionMitigated]`? {#impl-apis}
-----------------------------------------------------

Ideally, we'd be able to apply [{{InjectionMitigated}}] broadly, covering a
broad spectrum of capabilities to ensure that they're used for the purposes
that users and developers alike might expect.

Realistically, applying the attribute to existing APIs is going to be a
difficult sell (similar to the introduction of the [{{SecureContext}}]
attribute). We'll want to pick our battles.

The highest-priority APIs are those that grant access to capabilities that sit
somewhat outside the web's general origin-based security model. Device
capabilities like [[WebUSB]], OS primitives like the clipboard, and user
location are all good examples of powerful and potentially dangerous capabilites
that we'd really like to ensure are used by the site to whom they're granted,
and not to anyone who can trick the site into executing script.

More broadly, any API that requires user permission seems like a valid target
for this new attribute. When user agents gain confidence that code running on
an origin is code that origin intended to execute, we can make a much more
reasonable claim about the exclusivity associated with a user's choice to grant
a capability to that origin, and thereby ship new capabilities more safely.
